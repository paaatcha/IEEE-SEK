#include "NXCDefs.h"

#define MOTORES OUT_ABC
#define AMBAS_AS_DUAS_RODAS  OUT_AB
#define RODA_DIREITA  OUT_A
#define RODA_ESQUERDA  OUT_B
#define GARRA OUT_C

#define SENSOR_LUZ_BAIXO IN_4
#define SENSOR_LUZ_FRENTE IN_1
#define BUSSOLA        IN_3

#define preto 55
#define vermelho 45
#define azul 22
#define verde 32

#define canoVerde 1
#define canoVermelho 2

#define rotacaoMeio 150
#define rotacaoPouco 100
#define rotacaoCano 0
#define rotacaoPouquinho 10
#define tempoAndaMeio 1700

#define norte 1
#define leste 2
#define sul 3
#define oeste 4

#define potenciaNormal 65
#define potenciaRio 40
#define potenciaGarra 25
#define potenciaRotacao 80
#define potenciaCano 30

#define casoT posicao.coluna == 0
#define casoA posicao.coluna == 3
#define casoR posicao.coluna == 4

#define vm 1
#define vd 0

     int norte_vec[] =  {000,132,136,139,139,140,140,139,140,000,
                         000,133,136,137,139,139,139,140,140,000,
                         132,135,136,136,138,139,139,138,139,140,
                         139,138,138,139,140,139,139,140,141,140,
                         140,000,000,000,000,000,000,000,000,000,
                         139,140,139,139,140,139,140,140,140,140,
                         138,137,139,140,140,140,140,140,140,140,
                         138,139,140,141,141,140,140,140,140,140,
                         138,139,140,141,141,140,140,140,140,140};

     int sul_vec[] =    {00,13,12,18,18,18,18,19,19,00,
                         00,20,25,20,21,22,22,22,21,21,
                         21,23,24,23,23,23,24,23,23,24,
                         22,24,25,20,22,24,23,24,24,24,
                         22,00,00,00,00,00,00,00,00,00,
                         18,21,21,22,22,22,19,20,19,20,
                         19,19,22,22,23,22,19,20,19,20,
                         19,20,24,20,19,20,19,20,19,20,
                         19,20,22,20,19,20,19,20,19,20};

     int leste_vec[] =  {000,230,238,239,240,245,248,248,248,000,
                         000,231,238,239,245,246,246,246,248,000
                         233,235,240,240,241,245,245,245,245,246,
                         242,245,245,243,245,247,248,246,248,249,
                         239,000,000,000,000,000,000,000,000,000,
                         242,245,248,248,249,249,242,241,241,242,
                         245,246,245,247,252,255,242,241,241,242,
                         242,241,242,241,242,241,242,241,241,242,
                         242,241,242,241,242,241,242,241,241,242};

     int oeste_vec[] =  {00,78,82,84,85,84,84,83,84,00,
                         76,82,84,85,84,84,84,84,84,83,
                         83,83,83,84,85,84,84,85,84,84,
                         84,84,84,84,84,85,84,85,85,85,
                         00,00,00,00,00,00,00,00,00,00,
                         83,83,84,85,85,81,82,81,82,81,
                         82,84,85,84,85,81,82,81,82,81,
                         82,81,82,81,82,81,82,81,82,81,
                         82,81,82,81,82,81,82,81,82,81};

struct pos{
        int linha;
        int coluna;
        int direcao;
};
pos rio_inicio;
pos rio_final;
pos posicao;

/*CONTADORES*/
int kount=0;
int kountVetorCano=0;
int kountVetorVazamento=0;

struct cano{
        pos posic;
        int cor;
        int status;
};

cano vetorCano[12];
cano vetorVazamento[11];

int retorna_setpoint(){                /*retorna o setpoint da posicao atual do robo*/
    switch (posicao.direcao){
           case norte:return norte_vec[10*posicao.linha+posicao.coluna];
           case leste:return leste_vec[10*posicao.linha+posicao.coluna];
           case oeste:return oeste_vec[10*posicao.linha+posicao.coluna];
           case sul:return sul_vec[10*posicao.linha+posicao.coluna];
    }
}

// Calula parada da bussola pra nao da merda
int diffAng(int a1, int a2)
{
    int diff = (a1 - a2)%360;
    if(diff>180){
          diff = diff -360;
    }else{
          if(diff<-180)
               diff=diff+360;
    }
    return diff;
}

void imprime_valores()
{
        if(CurrentTick()%100<10){

                 ClearScreen();
        }

        TextOut(0, LCD_LINE1, "Linha: ");
        NumOut(60, LCD_LINE1, posicao.linha);
        TextOut(0, LCD_LINE2, "Coluna: ");
        NumOut(60, LCD_LINE2, posicao.coluna);
        TextOut(0, LCD_LINE3, "Direcao: ");
        NumOut(60, LCD_LINE3, posicao.direcao);
        TextOut(0, LCD_LINE5, "Bussola: ");
        NumOut(60, LCD_LINE5, SensorHTCompass(BUSSOLA));
        TextOut(0, LCD_LINE6, "Luz Frente: ");
        NumOut(60, LCD_LINE6, Sensor(SENSOR_LUZ_FRENTE));
        TextOut(0, LCD_LINE6, "Luz Baixo: ");
        NumOut(60, LCD_LINE6, Sensor(SENSOR_LUZ_BAIXO));
}

void andaPraFrente(int tipo)                  /*anda ateh o meio do quadrado à frente do robo*/
{
    int setpoint = retorna_setpoint();// retornando o valor de referencia

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    int erro;

    while(true)
    {
        imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,potenciaNormal-1*erro);
         OnFwd(RODA_DIREITA,potenciaNormal+1*erro);

         if(Sensor(SENSOR_LUZ_BAIXO)<preto)
         {
               if(!passouDaLinha)
               {
                   switch (posicao.direcao)
                   {
                          case norte: posicao.linha = posicao.linha - 1; break;
                          case leste: posicao.coluna = posicao.coluna + 1; break;
                          case oeste: posicao.coluna = posicao.coluna - 1; break;
                          case sul: posicao.linha = posicao.linha + 1; break;
                   }
                   setpoint=retorna_setpoint();

                   passouDaLinha = 1;
                   rotacaoLinha = MotorRotationCount(RODA_DIREITA);
               }
         }

         if(passouDaLinha)
         {
               if(abs(MotorRotationCount(RODA_DIREITA)-rotacaoLinha)>tipo){
                   Off(AMBAS_AS_DUAS_RODAS);
                   break;
               }
         }
     }
}
void andaPraFrenteRotacoes(int tipo)                  /*anda ateh o meio do quadrado à frente do robo*/
{
    int setpoint = retorna_setpoint();// retornando o valor de referencia

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    int erro;
    int rotacoesAnterior,rotacoesAtual;
    rotacoesAnterior = MotorRotationCount(RODA_DIREITA);
    while(true)
    {
         imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,potenciaNormal-1*erro);
         OnFwd(RODA_DIREITA,potenciaNormal+1*erro);
         
         rotacoesAtual = MotorRotationCount(RODA_DIREITA);
         if ( abs ( rotacoesAnterior - rotacoesAtual)  > tipo) break;

     }
}

void andaPraTrasRotacoes(int tipo)                  /*anda ateh o meio do quadrado à frente do robo*/
{
    int setpoint = retorna_setpoint();// retornando o valor de referencia

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    int erro;
    int rotacoesAnterior,rotacoesAtual;
    rotacoesAnterior = MotorRotationCount(RODA_DIREITA);
    while(true)
    {
         imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,-(potenciaNormal-1*erro));
         OnFwd(RODA_DIREITA,-(potenciaNormal+1*erro));

         rotacoesAtual = MotorRotationCount(RODA_DIREITA);
         if ( abs ( rotacoesAnterior - rotacoesAtual)  > tipo) break;

     }
}

void andaPraTras(int tipo)                  /*anda ateh o meio do quadrado à frente do robo*/
{
    int setpoint = retorna_setpoint();// retornando o valor de referencia

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    int erro;

    while(true)
    {
        imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,-potenciaNormal-1*erro);
         OnFwd(RODA_DIREITA,-potenciaNormal+1*erro);

         if(Sensor(SENSOR_LUZ_BAIXO)<preto)
         {
               if(!passouDaLinha)
               {
                   switch (posicao.direcao)
                   {
                          case norte: posicao.linha = posicao.linha + 1; break;
                          case leste: posicao.coluna = posicao.coluna - 1; break;
                          case oeste: posicao.coluna = posicao.coluna + 1; break;
                          case sul: posicao.linha = posicao.linha - 1; break;
                   }
                   setpoint=retorna_setpoint();

                   passouDaLinha = 1;
                   rotacaoLinha = MotorRotationCount(RODA_DIREITA);
               }
         }

         if(passouDaLinha)
         {
               if(abs(MotorRotationCount(RODA_DIREITA)-rotacaoLinha)>tipo){
                   Off(AMBAS_AS_DUAS_RODAS);
                   break;
               }
         }
     }
}
void andaPraFrenteVerificandoRio()                  /*anda ateh o meio do quadrado à frente do robo*/
{
    int setpoint = retorna_setpoint();// retornando o valor de referencia

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    unsigned long rotacaoLinhaFinal;
    unsigned long rotacoes;
    int erro;
    long atual, anterior;
    int contador=0;
    anterior = CurrentTick();
    while(true)
    {
        imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,potenciaRio-1*erro);
         OnFwd(RODA_DIREITA,potenciaRio+1*erro);

         if ( Sensor(SENSOR_LUZ_FRENTE) <= azul )
         {

            rotacaoLinhaFinal = MotorRotationCount(RODA_DIREITA);
            rotacoes = rotacaoLinhaFinal-rotacaoLinha;
            andaPraTras(rotacaoMeio+30); // anda pra tras no quadrado de tras! falta tratar caso do rio ta na coluna 2


            rio_inicio.linha = posicao.linha;
            rio_inicio.coluna = posicao.coluna+1;

            rio_final.linha = posicao.linha;
            /* Bluetooth - esperando resposta do outro robo*/
            rio_final.coluna = posicao.coluna+5;  /* Duto simples*/
            break;
         }

         atual = CurrentTick();

         if (atual - anterior > 140)
         {
                  if(Sensor(SENSOR_LUZ_BAIXO)<preto)
                  {

                          switch (posicao.direcao)
                          {
                                case norte: posicao.linha = posicao.linha - 1; break;
                                case leste: posicao.coluna = posicao.coluna + 1; break;
                                case oeste: posicao.coluna = posicao.coluna - 1; break;
                                case sul: posicao.linha = posicao.linha + 1; break;
                          }
                          rotacaoLinha = MotorRotationCount(RODA_DIREITA);
                  }
              anterior = atual;
          }
     }
}

void andaRobado(int tipo,int setpoint)                  /*anda ateh o meio do quadrado à frente do robo*/
{

    int passouDaLinha = 0;
    unsigned long rotacaoLinha;
    int erro;

    while(true)
    {
        imprime_valores();

         erro = diffAng(SensorHTCompass(BUSSOLA),setpoint);

         OnFwd(RODA_ESQUERDA,potenciaNormal-1*erro);
         OnFwd(RODA_DIREITA,potenciaNormal+1*erro);

         if(Sensor(SENSOR_LUZ_BAIXO)<preto)
         {
               if(!passouDaLinha)
               {
                   switch (posicao.direcao)
                   {
                          case norte: posicao.linha = posicao.linha - 1; break;
                          case leste: posicao.coluna = posicao.coluna + 1; break;
                          case oeste: posicao.coluna = posicao.coluna - 1; break;
                          case sul: posicao.linha = posicao.linha + 1; break;
                   }
                   setpoint=retorna_setpoint();

                   passouDaLinha = 1;
                   rotacaoLinha = MotorRotationCount(RODA_DIREITA);
               }

         }


         if(passouDaLinha)
         {
               if(abs(MotorRotationCount(RODA_DIREITA)-rotacaoLinha)>tipo){
                   Off(AMBAS_AS_DUAS_RODAS);
                   break;
               }
         }
     }
}

int absMinMax (int erro){
    if(abs(erro)>potenciaRotacao){
         return potenciaRotacao;
    }
    else{
         if(abs(erro)<25){
              return 30;
         }
    }
    return (abs(erro));
}

void giraDireita(int direcao)      /*Gira para a direcao (do robo) passada como parametro*/
{

    long tempoAtual;
    int setPoint;
    int erro;
    int giroerrado = 0;
    int t;
    switch (direcao)
    {
           case norte:setPoint = norte_vec[10*posicao.linha+posicao.coluna]; break;
           case leste:setPoint = leste_vec[10*posicao.linha+posicao.coluna]; break;
           case oeste:setPoint = oeste_vec[10*posicao.linha+posicao.coluna]; break;
           case sul:setPoint = sul_vec[10*posicao.linha+posicao.coluna]; break;
    }
    erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
    long tempoInicial = CurrentTick();
     while(erro <= 0)                          //Problemas com o sul, porem se colocarmos !=setPoint as vezes o sensor passar reto
     {
          OnFwd(RODA_ESQUERDA,absMinMax(erro));
          OnFwd(RODA_DIREITA,-absMinMax(erro));
          erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
          tempoAtual = CurrentTick();
          t=1;
          if ( tempoAtual - tempoInicial > 4000)
          {
                OnFwd(RODA_ESQUERDA,t+absMinMax(erro));
                OnFwd(RODA_DIREITA,-absMinMax(erro)-t);
                erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
                if ( erro <= 0) break;
                t++;
          }
     }
     Off(AMBAS_AS_DUAS_RODAS);
     posicao.direcao = direcao;
}

void giraEsquerda(int direcao)      /*Gira para a direcao (do robo) passada como parametro*/
{
    long tempoAtual;
    int setPoint;
    int erro;
    int giroerrado = 0;
    int t;
    switch (direcao)
    {
           case norte:setPoint = norte_vec[10*posicao.linha+posicao.coluna]; break;
           case leste:setPoint = leste_vec[10*posicao.linha+posicao.coluna]; break;
           case oeste:setPoint = oeste_vec[10*posicao.linha+posicao.coluna]; break;
           case sul:setPoint = sul_vec[10*posicao.linha+posicao.coluna]; break;
    }

     erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
     long tempoInicial = CurrentTick();
     while(erro >= 0)                          //Problemas com o sul, porem se colocarmos !=setPoint as vezes o sensor passar reto
     {
         OnFwd(RODA_ESQUERDA,-absMinMax(erro));
         OnFwd(RODA_DIREITA,absMinMax(erro));
         erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
         tempoAtual = CurrentTick();
         t=1;
          if ( tempoAtual - tempoInicial > 4000)
          {
                OnFwd(RODA_ESQUERDA,t+absMinMax(erro));
                OnFwd(RODA_DIREITA,-absMinMax(erro)-t);
                erro=diffAng(SensorHTCompass(BUSSOLA),setPoint);
                if ( erro <= 0) break;
                t++;
          }
     }
     Off(AMBAS_AS_DUAS_RODAS);
     posicao.direcao = direcao;
}

void giraDirecao(int direcao)
{
     if(posicao.direcao-direcao==-1 || posicao.direcao-direcao==3)
     {
         giraDireita(direcao);
     }
     else
     {
         giraEsquerda(direcao);
     }
     Off(AMBAS_AS_DUAS_RODAS);
}

int verificaCorCano(){

     if(Sensor(SENSOR_LUZ_FRENTE) <= verde)
     {
           return vd;
     }
     else
     {
           PlayTone(440,2000);
           return vm;
     }

}

void abreGarra(){
     Off(AMBAS_AS_DUAS_RODAS);
     OnFwd(GARRA,potenciaGarra);
     Wait(1100);
     Off(MOTORES);
     Wait(1000);
}

int fechaGarra(){
     Off(AMBAS_AS_DUAS_RODAS);
     OnFwd(GARRA,-potenciaGarra);
     Wait(1400);
     Off(MOTORES);
     Wait(500);
}

void andadinhaPraPegaCano(){
     RotateMotor(AMBAS_AS_DUAS_RODAS,60, 180);
}

void andadinhaPraTrasAposCano(){
     RotateMotor(AMBAS_AS_DUAS_RODAS,-60, 100);
}

void chegaNoPrimeiroCano(){

    giraDirecao(norte);
    int i;
    int vezes;

     if(casoT)
     {
                andaPraFrente(rotacaoMeio);
                giraDirecao(leste);
                andaPraFrente(rotacaoMeio);
                giraDirecao(norte);
                andaPraFrente(rotacaoMeio);
                giraDirecao(oeste);
     }
     else if(casoA)
          {
                   vezes = 8 - posicao.coluna;
                   andaPraFrente(rotacaoMeio);
                   andaPraFrente(rotacaoMeio);

                   giraDirecao(leste);

                   repeat(vezes)
                   {
                        andaPraFrente(rotacaoMeio);
                   }
          }
          else if(casoR)
               {
                       vezes = 8 - posicao.coluna;
                       andaPraFrente(rotacaoMeio);
                       andaPraFrente(rotacaoMeio);

                       giraDirecao(leste);

                       repeat(vezes)
                       {
                            andaPraFrente(rotacaoMeio);
                       }
               }
               else
               {
                       vezes = posicao.coluna - 1;
                       andaPraFrente(rotacaoMeio);
                       andaPraFrente(rotacaoMeio);

                       giraDirecao(oeste);

                       repeat(vezes)
                       {
                            andaPraFrente(rotacaoMeio);
                       }
               }
}

void reordena_vazamento(){
	int i;
	pos aux1;
	aux1 = vetorVazamento[1];
	for (i=1; i<7; i++){
		vetorVazamento[1] = vetorVazamento[i+1];
	}
	vetorVazamento[7] = aux1;
}

void criaVetorVazamentoDuplo()
{
  int vaza_inicio = posicao.coluna+2;
	int vaza_fim = vaza_inicio+2;
	int i, j, falta_frente, falta_tras;
 	i=j=falta_frente=falta_tras=0;

  for (i=0;i<11;i++) vetorVazamento[i].status=1;
  
	if(posicao.coluna<3){
		for(i=0;i<7;i++){
			if(i==0 || i==5)
				vetorVazamento[i].posic.linha = 2;
			else
				vetorVazamento[i].posic.linha = 1;

			if(i==0)
				vetorVazamento[i].posic.coluna = vaza_inicio - 1;
			else {
				if (i == 6)
					vetorVazamento[i].posic.coluna = vaza_fim + 1;
				else{
					vetorVazamento[i].posic.coluna = vaza_inicio + i -2;
				}
			}
			vetorVazamento[i].cor = vm;
			vetorVazamento[i].posic.direcao = sul;
		}

		falta_frente = 8 - vaza_fim;
		for (j=0; j < falta_frente; j++){
			vetorVazamento[i].posic.linha = 2;
			vetorVazamento[i].posic.coluna = vaza_fim + 2 + j;
			vetorVazamento[i].cor = vd,
			vetorVazamento[i].posic.direcao = sul;
			i++;
		}
		falta_tras = vaza_inicio - 2;
		for (j=0;j<falta_tras;j++){
			vetorVazamento[i].posic.linha = 2;
			vetorVazamento[i].posic.coluna = vaza_inicio - 2 - j;
			vetorVazamento[i].cor = vd;
			vetorVazamento[i].posic.direcao = sul;
			i++;
		}
	} else {
		for(i=0;i<7;i++){
			if(i==0 || i==5)
				vetorVazamento[i].posic.linha = 2;
			else
				vetorVazamento[i].posic.linha = 1;

			if(i==0)
				vetorVazamento[i].posic.coluna = vaza_fim + 1;
			else {
				if (i == 6)
					vetorVazamento[i].posic.coluna = vaza_inicio - 1;
				else{
					vetorVazamento[i].posic.coluna = vaza_fim - i + 2;
				}
			}
			vetorVazamento[i].cor = vm;
			vetorVazamento[i].posic.direcao = sul;
		}

		falta_frente = 8 - vaza_fim;
		for (j=0; j < falta_frente; j++){
			vetorVazamento[i].posic.linha = 2;
			vetorVazamento[i].posic.coluna = vaza_fim + 2 + j;
			vetorVazamento[i].cor = vd;
			vetorVazamento[i].posic.direcao = sul;
			i++;
		}
		falta_tras = vaza_inicio - 2;
		for (j=0;j<falta_tras;j++){
			vetorVazamento[i].posic.linha = 2;
			vetorVazamento[i].posic.coluna = vaza_inicio - 2 - j;
			vetorVazamento[i].cor = vd;
			vetorVazamento[i].posic.direcao = sul;
			i++;
		}
		if(posicao.coluna == 3)
		{
			reordena_vazamento();
		}
		if(posicao.coluna == 4)
		{
			vetorVazamento[1].posic.coluna--;
			vetorVazamento[1].posic.linha++;
			vetorVazamento[1].posic.direcao = leste;
		}
	}

 /*
     if(casoT)
     {
          vetorVazamento[0].posic.coluna = 1;
          vetorVazamento[0].posic.linha = 2;
          vetorVazamento[0].cor =  vm;
          vetorVazamento[0].status = 0;
          
          vetorVazamento[1].posic.coluna = 1;
          vetorVazamento[1].posic.linha = 1;
          vetorVazamento[1].cor =  vm;
          vetorVazamento[1].status = 0;
          
          vetorVazamento[2].posic.coluna = 2;
          vetorVazamento[2].posic.linha = 1;
          vetorVazamento[2].cor =  vm;
          vetorVazamento[2].status = 0;
          
          vetorVazamento[3].posic.coluna = 3;
          vetorVazamento[3].posic.linha = 1;
          vetorVazamento[3].cor =  vm;
          vetorVazamento[3].status = 0;
          
          vetorVazamento[4].posic.coluna = 4;
          vetorVazamento[4].posic.linha = 1;
          vetorVazamento[4].cor =  vm;
          vetorVazamento[4].status = 0;
          
          vetorVazamento[5].posic.coluna = 5;
          vetorVazamento[5].posic.linha = 2;
          vetorVazamento[5].cor =  vm;
          vetorVazamento[5].status = 0;
          
          vetorVazamento[6].posic.coluna = 5;
          vetorVazamento[6].posic.linha = 1;
          vetorVazamento[6].cor =  vm;
          vetorVazamento[6].status = 0;
          
          vetorVazamento[7].posic.coluna = 6;
          vetorVazamento[7].posic.linha = 2;
          vetorVazamento[7].cor =  vd;
          vetorVazamento[7].status = 0;

          vetorVazamento[8].posic.coluna = 7;
          vetorVazamento[8].posic.linha = 2;
          vetorVazamento[8].cor =  vd;
          vetorVazamento[8].status = 0;

          vetorVazamento[9].posic.coluna = 8;
          vetorVazamento[9].posic.linha = 2;
          vetorVazamento[9].cor =  vd;
          vetorVazamento[9].status = 0;

          vetorVazamento[10].posic.coluna = 9;
          vetorVazamento[10].posic.linha = 2;
          vetorVazamento[10].cor =  vm;
          vetorVazamento[10].status = 0;
          
           vetorVazamento[0].posic.direcao = sul;
           vetorVazamento[1].posic.direcao = sul;
           vetorVazamento[2].posic.direcao = sul;
           vetorVazamento[3].posic.direcao = sul;
           vetorVazamento[4].posic.direcao = sul;
           vetorVazamento[5].posic.direcao = sul;
           vetorVazamento[6].posic.direcao = sul;
           vetorVazamento[7].posic.direcao = sul;
           vetorVazamento[8].posic.direcao = sul;
           vetorVazamento[9].posic.direcao = sul;
           vetorVazamento[10].posic.direcao = sul;
           
     }
     else if(casoA)
          {
              vetorVazamento[0].posic.coluna = 8;
              vetorVazamento[0].posic.linha = 2;
              vetorVazamento[0].cor =  vm;
              vetorVazamento[0].status = 0;

              vetorVazamento[1].posic.coluna = 7;
              vetorVazamento[1].posic.linha = 1;
              vetorVazamento[1].cor =  vm;
              vetorVazamento[1].status = 0;

              vetorVazamento[2].posic.coluna = 6;
              vetorVazamento[2].posic.linha = 1;
              vetorVazamento[2].cor =  vm;
              vetorVazamento[2].status = 0;

              vetorVazamento[3].posic.coluna = 5;
              vetorVazamento[3].posic.linha = 1;
              vetorVazamento[3].cor =  vm;
              vetorVazamento[3].status = 0;

              vetorVazamento[4].posic.coluna = 4;
              vetorVazamento[4].posic.linha = 2;
              vetorVazamento[4].cor =  vm;
              vetorVazamento[4].status = 0;

              vetorVazamento[5].posic.coluna = 4;
              vetorVazamento[5].posic.linha = 1;
              vetorVazamento[5].cor =  vm;
              vetorVazamento[5].status = 0;

              vetorVazamento[6].posic.coluna = 9;
              vetorVazamento[6].posic.linha = 2;
              vetorVazamento[6].cor =  vd;
              vetorVazamento[6].status = 0;

              vetorVazamento[7].posic.coluna = 8;
              vetorVazamento[7].posic.linha = 1;
              vetorVazamento[7].cor =  vm;
              vetorVazamento[7].status = 0;

              vetorVazamento[8].posic.coluna = 3;
              vetorVazamento[8].posic.linha = 2;
              vetorVazamento[8].cor =  vd;
              vetorVazamento[8].status = 0;

              vetorVazamento[9].posic.coluna = 2;
              vetorVazamento[9].posic.linha = 2;
              vetorVazamento[9].cor =  vd;
              vetorVazamento[9].status = 0;

              vetorVazamento[10].posic.coluna = 1;
              vetorVazamento[10].posic.linha = 2;
              vetorVazamento[10].cor =  vd;
              vetorVazamento[10].status = 0;
              
             vetorVazamento[0].posic.direcao = sul;
             vetorVazamento[1].posic.direcao = sul;
             vetorVazamento[2].posic.direcao = sul;
             vetorVazamento[3].posic.direcao = sul;
             vetorVazamento[4].posic.direcao = sul;
             vetorVazamento[5].posic.direcao = sul;
             vetorVazamento[6].posic.direcao = sul;
             vetorVazamento[7].posic.direcao = sul;
             vetorVazamento[8].posic.direcao = sul;
             vetorVazamento[9].posic.direcao = sul;
             vetorVazamento[10].posic.direcao = sul;
          }
          else if(casoR)
               {
                    vetorVazamento[0].posic.coluna = 9;
                    vetorVazamento[0].posic.linha = 2;
                    vetorVazamento[0].cor =  vm;
                    vetorVazamento[0].status = 0;

                    vetorVazamento[1].posic.coluna = 8;
                    vetorVazamento[1].posic.linha = 2;
                    vetorVazamento[1].cor =  vm;
                    vetorVazamento[1].status = 0;

                    vetorVazamento[2].posic.coluna = 8;
                    vetorVazamento[2].posic.linha = 1;
                    vetorVazamento[2].cor =  vm;
                    vetorVazamento[2].status = 0;

                    vetorVazamento[3].posic.coluna = 7;
                    vetorVazamento[3].posic.linha = 1;
                    vetorVazamento[3].cor =  vm;
                    vetorVazamento[3].status = 0;

                    vetorVazamento[4].posic.coluna = 6;
                    vetorVazamento[4].posic.linha = 1;
                    vetorVazamento[4].cor =  vm;
                    vetorVazamento[4].status = 0;

                    vetorVazamento[5].posic.coluna = 5;
                    vetorVazamento[5].posic.linha = 2;
                    vetorVazamento[5].cor =  vm;
                    vetorVazamento[5].status = 0;

                    vetorVazamento[6].posic.coluna = 5;
                    vetorVazamento[6].posic.linha = 1;
                    vetorVazamento[6].cor =  vm;
                    vetorVazamento[6].status = 0;

                    vetorVazamento[7].posic.coluna = 4;
                    vetorVazamento[7].posic.linha = 2;
                    vetorVazamento[7].cor =  vd;
                    vetorVazamento[7].status = 0;

                    vetorVazamento[8].posic.coluna = 3;
                    vetorVazamento[8].posic.linha = 2;
                    vetorVazamento[8].cor =  vd;
                    vetorVazamento[8].status = 0;

                    vetorVazamento[9].posic.coluna = 2;
                    vetorVazamento[9].posic.linha = 2;
                    vetorVazamento[9].cor =  vd;
                    vetorVazamento[9].status = 0;

                    vetorVazamento[10].posic.coluna = 1;
                    vetorVazamento[10].posic.linha = 2;
                    vetorVazamento[10].cor =  vd;
                    vetorVazamento[10].status = 0;
                    
                    vetorVazamento[0].posic.direcao = sul;
                    vetorVazamento[1].posic.direcao = leste;
                    vetorVazamento[2].posic.direcao = sul;
                    vetorVazamento[3].posic.direcao = sul;
                    vetorVazamento[4].posic.direcao = sul;
                    vetorVazamento[5].posic.direcao = sul;
                    vetorVazamento[6].posic.direcao = sul;
                    vetorVazamento[7].posic.direcao = sul;
                    vetorVazamento[8].posic.direcao = sul;
                    vetorVazamento[9].posic.direcao = sul;
                    vetorVazamento[10].posic.direcao = sul;
               }
               else
               {
                    if(posicao.coluna == 1)
                    {
                        vetorVazamento[0].posic.coluna = 2;
                        vetorVazamento[0].posic.linha = 2;
                        vetorVazamento[0].cor =  vm;
                        vetorVazamento[0].status = 0;

                        vetorVazamento[1].posic.coluna = 2;
                        vetorVazamento[1].posic.linha = 1;
                        vetorVazamento[1].cor =  vm;
                        vetorVazamento[1].status = 0;

                        vetorVazamento[2].posic.coluna = 3;
                        vetorVazamento[2].posic.linha = 1;
                        vetorVazamento[2].cor =  vm;
                        vetorVazamento[2].status = 0;

                        vetorVazamento[3].posic.coluna = 4;
                        vetorVazamento[3].posic.linha = 1;
                        vetorVazamento[3].cor =  vm;
                        vetorVazamento[3].status = 0;

                        vetorVazamento[4].posic.coluna = 5;
                        vetorVazamento[4].posic.linha = 1;
                        vetorVazamento[4].cor =  vm;
                        vetorVazamento[4].status = 0;

                        vetorVazamento[5].posic.coluna = 6;
                        vetorVazamento[5].posic.linha = 2;
                        vetorVazamento[5].cor =  vm;
                        vetorVazamento[5].status = 0;

                        vetorVazamento[6].posic.coluna = 6;
                        vetorVazamento[6].posic.linha = 1;
                        vetorVazamento[6].cor =  vm;
                        vetorVazamento[6].status = 0;

                        vetorVazamento[7].posic.coluna = 7;
                        vetorVazamento[7].posic.linha = 2;
                        vetorVazamento[7].cor =  vd;
                        vetorVazamento[7].status = 0;

                        vetorVazamento[8].posic.coluna = 8;
                        vetorVazamento[8].posic.linha = 2;
                        vetorVazamento[8].cor =  vd;
                        vetorVazamento[8].status = 0;

                        vetorVazamento[9].posic.coluna = 9;
                        vetorVazamento[9].posic.linha = 2;
                        vetorVazamento[9].cor =  vd;
                        vetorVazamento[9].status = 0;

                        vetorVazamento[10].posic.coluna = 1;
                        vetorVazamento[10].posic.linha = 2;
                        vetorVazamento[10].cor =  vd;
                        vetorVazamento[10].status = 0;
                   }
                   else
                   {
                        vetorVazamento[0].posic.coluna = 3;
                        vetorVazamento[0].posic.linha = 2;
                        vetorVazamento[0].cor =  vm;
                        vetorVazamento[0].status = 0;

                        vetorVazamento[1].posic.coluna = 3;
                        vetorVazamento[1].posic.linha = 1;
                        vetorVazamento[1].cor =  vm;
                        vetorVazamento[1].status = 0;

                        vetorVazamento[2].posic.coluna = 4;
                        vetorVazamento[2].posic.linha = 1;
                        vetorVazamento[2].cor =  vm;
                        vetorVazamento[2].status = 0;

                        vetorVazamento[3].posic.coluna = 5;
                        vetorVazamento[3].posic.linha = 1;
                        vetorVazamento[3].cor =  vm;
                        vetorVazamento[3].status = 0;

                        vetorVazamento[4].posic.coluna = 6;
                        vetorVazamento[4].posic.linha = 1;
                        vetorVazamento[4].cor =  vm;
                        vetorVazamento[4].status = 0;

                        vetorVazamento[5].posic.coluna = 7;
                        vetorVazamento[5].posic.linha = 2;
                        vetorVazamento[5].cor =  vm;
                        vetorVazamento[5].status = 0;

                        vetorVazamento[6].posic.coluna = 7;
                        vetorVazamento[6].posic.linha = 1;
                        vetorVazamento[6].cor =  vm;
                        vetorVazamento[6].status = 0;

                        vetorVazamento[7].posic.coluna = 8;
                        vetorVazamento[7].posic.linha = 2;
                        vetorVazamento[7].cor =  vd;
                        vetorVazamento[7].status = 0;

                        vetorVazamento[8].posic.coluna = 9;
                        vetorVazamento[8].posic.linha = 2;
                        vetorVazamento[8].cor =  vd;
                        vetorVazamento[8].status = 0;

                        vetorVazamento[9].posic.coluna = 2;
                        vetorVazamento[9].posic.linha = 2;
                        vetorVazamento[9].cor =  vd;
                        vetorVazamento[9].status = 0;

                        vetorVazamento[10].posic.coluna = 1;
                        vetorVazamento[10].posic.linha = 2;
                        vetorVazamento[10].cor =  vd;
                        vetorVazamento[10].status = 0;
                   }

                   vetorVazamento[0].posic.direcao = sul;
                   vetorVazamento[1].posic.direcao = sul;
                   vetorVazamento[2].posic.direcao = sul;
                   vetorVazamento[3].posic.direcao = sul;
                   vetorVazamento[4].posic.direcao = sul;
                   vetorVazamento[5].posic.direcao = sul;
                   vetorVazamento[6].posic.direcao = sul;
                   vetorVazamento[7].posic.direcao = sul;
                   vetorVazamento[8].posic.direcao = sul;
                   vetorVazamento[9].posic.direcao = sul;
                   vetorVazamento[10].posic.direcao = sul;
               }
   */
}

void criaVetorCano()
{
      for(kount = 0; kount < 12; kount++){ //Inicializa o vetor dos canos ja posicionados na arena como ativos.
          vetorCano[kount].status = 1;
      }

     if(casoA || casoR)
     {
          for(kount = 0; kount < 12; kount++)
          {
                 if(kount == 0 || kount == 1)
                 {
                       vetorCano[kount].posic.direcao = leste;
                       vetorCano[kount].posic.coluna = 8;
                       if (kount == 0) vetorCano[kount].posic.linha = 1;
                       else vetorCano[kount].posic.linha = 0;
                  }
                 else if(kount > 1 && kount < 10)
                      {
                               vetorCano[kount].posic.direcao = norte;
                               vetorCano[kount].posic.linha = 0;
                               vetorCano[kount].posic.coluna = 10-kount;
                      }
                      else
                      {
                            vetorCano[kount].posic.direcao = oeste;
                            vetorCano[kount].posic.coluna = 1;
                            if (kount == 10) vetorCano[kount].posic.linha = 0;
                            else vetorCano[kount].posic.linha = 1;
                      }
          }
     }
     else
     {
          for(kount = 0; kount < 12; kount++)
          {
                 if(kount == 0 || kount == 1)
                 {
                       vetorCano[kount].posic.direcao = oeste;
                       vetorCano[kount].posic.coluna = 1;
                       if (kount == 0) vetorCano[kount].posic.linha = 1;
                       else vetorCano[kount].posic.linha = 0;
                 }
                 else if(kount > 1 && kount < 10)
                 {
                      vetorCano[kount].posic.direcao = norte;
                      vetorCano[kount].posic.linha = 0;
                      vetorCano[kount].posic.coluna = kount-1;
                 }
                 else
                 {
                     vetorCano[kount].posic.direcao = leste;
                     vetorCano[kount].posic.coluna = 8;
                     if (kount == 10) vetorCano[kount].posic.linha = 0;
                     else vetorCano[kount].posic.linha = 1;
                 }
          }
     }
}
                           // robolado sempre pro norte  /* TERMINAR A FUNÇÃO DESLOCAMENTO!! */
void deslocamentoLinhaPrimeiro(pos destino)
{
////////////////////  Parte das linhas  /////////////////////////////
     if((posicao.direcao == sul && (destino.linha != posicao.linha)) || (posicao.direcao == norte && (destino.linha != posicao.linha)))
         giraDirecao(leste);

     if (destino.linha > posicao.linha)
     {
           giraDirecao(sul);
     }
     else if (destino.linha < posicao.linha)
           {
                giraDirecao(norte);
           }

     repeat(abs(posicao.linha - destino.linha))
     {
           andaPraFrente(rotacaoMeio);
     }
           
//////////////////////////////////////////////////////////////////////

////////////////////  Parte das colunas  /////////////////////////////
     if((posicao.direcao == leste && (destino.coluna != posicao.coluna)) || (posicao.direcao == oeste && (destino.coluna != posicao.coluna)))
           giraDirecao(sul);

     if (destino.coluna > posicao.coluna)
     {
           giraDirecao(leste);
     }
     else if (destino.coluna < posicao.coluna)
           {
                giraDirecao(oeste);
           }

     repeat(abs(posicao.coluna - destino.coluna))
     {
           andaPraFrente(rotacaoMeio);
     }
     if(abs(destino.direcao-posicao.direcao) == 2 && (destino.direcao == oeste || destino.direcao == leste))
         giraDirecao(sul);
     if(abs(destino.direcao-posicao.direcao) == 2 && (destino.direcao == norte || destino.direcao == sul))
         giraDirecao(leste);
         
     giraDirecao(destino.direcao);
//////////////////////////////////////////////////////////////////////
}
void deslocamentoColunaPrimeiro(pos destino)
{
////////////////////  Parte das colunas  /////////////////////////////

     if((posicao.direcao == leste && (destino.coluna != posicao.coluna)) || (posicao.direcao == oeste && (destino.coluna != posicao.coluna)))
           giraDirecao(sul);
           
     if (destino.coluna > posicao.coluna)
     {
           giraDirecao(leste);
     }
     else if (destino.coluna < posicao.coluna)
           {
                giraDirecao(oeste);
           }

     repeat(abs(posicao.coluna - destino.coluna))
     {
           andaPraFrente(rotacaoMeio);
     }
//////////////////////////////////////////////////////////////////////
////////////////////  Parte das linhas  /////////////////////////////
     if((posicao.direcao == sul && (destino.linha != posicao.linha)) || (posicao.direcao == norte && (destino.linha != posicao.linha)))
           giraDirecao(leste);

      if (destino.linha > posicao.linha)
     {
           giraDirecao(sul);
     }
     else if (destino.linha < posicao.linha)
           {
                giraDirecao(norte);
           }

     repeat(abs(posicao.linha - destino.linha))
     {
           if (posicao.coluna == 7 && posicao.direcao == leste)andaPraFrente(rotacaoMeio-40);
           else andaPraFrente(rotacaoMeio);
     }
     
     if(abs(destino.direcao-posicao.direcao) == 2 && (destino.direcao == oeste || destino.direcao == leste))
         giraDirecao(sul);
     if(abs(destino.direcao-posicao.direcao) == 2 && (destino.direcao == norte || destino.direcao == sul))
         giraDirecao(leste);

     giraDirecao(destino.direcao);

//////////////////////////////////////////////////////////////////////
}
void andadinhaPraTrasAposCanoDesejado(){
     RotateMotor(AMBAS_AS_DUAS_RODAS,-60, 200);
}
int temCanoVerde()
{
    int conta;
    int flag;
    for(conta=0;conta<11;conta++)
    {
        if (vetorCano[conta].status == 1 && vetorCano[conta].cor == vd)
        {
            flag = 1;
            break;
        }
    }
    return flag;
}
void desligaMotor(){

     Off(AMBAS_AS_DUAS_RODAS);
     Wait(300);
}
void colocaPrimeiroCano(){

         int corCano;
         pos pos_aux;
         int CanoVerde;

         while( kountVetorVazamento < 11 && kountVetorCano < 12 )
         {

             //andadinhaPraPegaCano();
             andaPraFrenteRotacoes(120);
             desligaMotor();
             fechaGarra();
             corCano = verificaCorCano();

             if (vetorVazamento[kountVetorVazamento].cor == corCano )
             {
                   //andaPraTras(rotacaoMeio);
                   //andadinhaPraTrasAposCanoDesejado();
                   andaPraTrasRotacoes(100);
                   desligaMotor();
                   if (vetorVazamento[kountVetorVazamento].posic.coluna == 9)
                   {
                       pos_aux.coluna = 8;
                       pos_aux.linha = vetorVazamento[kountVetorVazamento].posic.linha;
                       pos_aux.direcao = leste;
                       deslocamentoColunaPrimeiro(pos_aux);
                       andaPraFrente(rotacaoMeio);
                       giraDirecao(sul);
                       andaPraFrenteRotacoes(100);
                       desligaMotor();
                       //andaPraFrente(rotacaoCano);
                       abreGarra();
                       //andaPraTras(rotacaoCano);
                       //andadinhaPraTrasAposCanoDesejado();
                       andaPraTrasRotacoes(90);
                       desligaMotor();
                       
                       vetorCano[kountVetorCano].cor = corCano;
                       vetorCano[kountVetorCano].status = 0;
                       kountVetorVazamento++;
                       giraDirecao(oeste);
                       andaPraFrente(rotacaoMeio);
                   }
                   else
                   {
                       deslocamentoColunaPrimeiro(vetorVazamento[kountVetorVazamento].posic);
                       andaPraFrenteRotacoes(100);
                       desligaMotor();
                       //andaPraFrente(rotacaoCano);
                       abreGarra();
                       //andaPraTras(rotacaoCano);
                       //andadinhaPraTrasAposCanoDesejado();
                       andaPraTrasRotacoes(90);
                       desligaMotor();
                       vetorCano[kountVetorCano].cor = corCano;
                       vetorCano[kountVetorCano].status = 0;
                       kountVetorVazamento++;
                   }
             }
             else
             {
                  vetorCano[kountVetorCano].cor = corCano;
                  abreGarra();
                  andaPraTrasRotacoes(80);
                  desligaMotor();
                  //andadinhaPraTrasAposCanoDesejado();
             }

             kountVetorCano++;
             
             CanoVerde = temCanoVerde();
             
             if(kountVetorCano > 11 && CanoVerde == 1){
                 kountVetorCano = 0;
             }

             while(vetorCano[kountVetorCano].status == 0)
             {
                 kountVetorCano++;
             }
             deslocamentoLinhaPrimeiro(vetorCano[kountVetorCano].posic);
         }
         

}

task main()
{
     SetSensorLight(SENSOR_LUZ_BAIXO);
     SetSensorLight(SENSOR_LUZ_FRENTE);
     SetSensorLowspeed(BUSSOLA);

     posicao.linha = 0;                          /*Posicao de Inicio do robo de 0 a 9 nas linhas*/
     posicao.coluna = 1;                         /* e de  0 a 6 nas colunas*/
     posicao.direcao = sul;

     andaPraFrente(rotacaoMeio);
     andaPraFrente(rotacaoMeio+80);

     giraDirecao(oeste);

     andaPraFrente(rotacaoMeio-45);

     giraDirecao(sul);

     andaPraFrente(rotacaoMeio-100);

     giraDirecao(leste);

     andaPraFrenteVerificandoRio();

     criaVetorCano();

     criaVetorVazamentoDuplo();

     chegaNoPrimeiroCano();

     colocaPrimeiroCano();

}
